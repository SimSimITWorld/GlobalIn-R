library(sqldf)
fruits_2<-read.csv.sql('Fruits_sql.csv', sql='select * from  file where Year=2008')
library(readr)
fruits_2<-read.csv.sql('Fruits_sql.csv', sql='select * from  file where Year=2008')
library(googleVis)
fruits_2<-read.csv.sql('Fruits_sql.csv', sql='select * from  file where Year=2008')
library(DBI)
fruits_2<-read.csv.sql('Fruits_sql.csv', sql='select * from  file where Year=2008')
library(RSQLite)
fruits_2<-read.csv.sql('Fruits_sql.csv', sql='select * from  file where Year=2008')
detach("package:readr", unload = TRUE)
fruits_2<-read.csv.sql('Fruits_sql.csv', sql='select * from  file where Year=2008')
fruits_2<-read.csv('Fruits_sql.csv', sql='select * from  file where Year=2008')
fruits_2<-read.csv.sql('Fruits_sql.csv', sql='select * from  file where Year=2008')
install.packages('dblyr')
install.packages('dbplyr')
library(dbplyr)
library(dbplyr)
library(dplyr)
fruits_2<-read.csv.sql('Fruits_sql.csv', sql='select * from  file where Year=2008')
library(dplyr)
fruits_2<-read.csv.sql('Fruits_sql.csv', sql='select * from  file where Year=2008')
library(RSQLite)
library(sqldf)
fruits_2<-read.csv.sql('Fruits_sql.csv', sql='select * from  file where Year=2008')
detach("package:DBI", unload = TRUE)
install.packages('dbplyr')
install.packages("dbplyr")
library(googleVis)
library(sqldf)
fruits_2<-read.csv.sql('Fruits_sql.csv', sql='select * from  file where Year=2008')
library(dplyr)
fruits_2<-read.csv.sql('Fruits_sql.csv', sql='select * from  file where Year=2008')
library(DBI)
fruits_2<-read.csv.sql('Fruits_sql.csv', sql='select * from  file where Year=2008')
fruits_2<-read.csv('Fruits_sql.csv', sql='select * from  file where Year=2008')
fruits_2<-read.csv2('Fruits_sql.csv', sql='select * from  file where Year=2008')
fruits_2<-read.csv2.sql('Fruits_sql.csv', sql='select * from  file where Year=2008')
fruits_2<-read.sql('Fruits_sql.csv', sql='select * from  file where Year=2008')
fruits_2<-read.csv.sql('Fruits_sql.csv', sql='select * from  file where Year=2008')
install.packages('DBI')
install.packages('RODBC')
library(RODBC)
fruits_2<-read.csv.sql('Fruits_sql.csv', sql='select * from  file where Year=2008')
db<-odbcConnect('testdb5')
db<-odbcConnect('testdb5', scott, tiger)
db<-odbcConnect('testdb5', 'scott', 'tiger')
db<-odbcConnect('testdb5', uid='scott', pwd='tiger')
db<-odbcConnect('testdb5', uid='scott', pwd='tiger', dns='testdb5')
fruits_2<-read.csv.sql('Fruits_sql.csv', sql='select * from  file where Year=2008')
sql<-sqlQuery(db, 'select * from dept')
sql<-sqlQuery(db, 'select * from dept', believNRows=FALSE)
sql<-sqlQuery(db, 'select * from dept', believeNRows=FALSE)
sql
sql2<-sqlQuery(db, 'select * from emp', believeNRows=FALSE)
sql2
install.packages('WriteXLS')
library(WriteXLS)
name<-c('Apple', 'Banana', 'Peach')
price<-c(300, 200, 100)
item<-data.frame(NAME=name, PRICE=price)
item
WriteXLS('item', 'item.xls')
WriteXLS('item', 'item.xlsx')
install.packages('WriteXLSX')
install.packages('xlsx')
library(xlsx)
library(xlsxjars)
WriteXLS('item', 'item.xlsx')
xlsxjars::('item', 'item.xlsx')
xlsxjars:('item', 'item.xlsx')
write('item', 'item.xlsx')
write('item', 'item.xls')
write(item, 'item.xls')
name<-c('Apple', 'Banana', 'Peach')
price<-c(300, 200, 100)
item<-data.frame(NAME=name, PRICE=price)
item
write(item, 'item.xls')
write(item, 'item.xlsx')
write(item, 'item.xlsx')
write(item, 'item.xls')
write('item', 'item.xls')
WriteXLS('item', 'item.xls')
library(xlsxjars)
WriteXLS('item', 'item.xls')
WriteXLS('item', 'item.xlsx')
WriteXLS('item', 'item.xls')
detach("package:xlsxjars", unload = TRUE)
install.packages('WriteXLS')
install.packages("WriteXLS")
library(WriteXLS)
name<-c('Apple', 'Banana', 'Peach')
price<-c(300, 200, 100)
item<-data.frame(NAME=name, PRICE=price)
item
WriteXLS('item', 'item.xls')
library(googleVis)
library(RODBC)
library(sqldf)
WriteXLS('item', 'item.xls')
name<-c('Apple', 'Banana', 'Peach')
price<-c(300, 200, 100)
item<-data.frame(NAME=name, PRICE=price)
item
WriteXLS('item', 'item.xls')
WriteXLS('item', 'item.xls')
library('googleVis')
library(sqldf)
library(RODBC)
library(sqldf)
library(WriteXLS)
name<-c('Apple', 'Banana', 'Peach')
price<-c(300, 200, 100)
item<-data.frame(NAME=name, PRICE=price)
item
WriteXLS('item', 'item.xls')
fruits6<-read.delim('clipboard', header=T)
fruits6
install.packages('XML')
library(XML)
install.packages('kulife')
library(kulife)
name
name<-c('Apple','Banana','Peach')
price<-c(300,200,100)
item
item<-data.frame(NAME=name,PRICE=price)
item
write.xml(item.file='item.xml')
install.packages('xml2')
library('xml2')
write.xml(item.file='item.xml')
vec1<-c(1,2,3,4,5)
write_xml(item.file='item.xml')
vec2<-c('a','b','c','d','e')
max(vec1)
min(vec1)
mean(vec1)
max(vec2)
min(vec2)
mean(vec2)
write_xml('item.xml')
read_xml('item.xml')
read_xml('item.xml')
read_xml('item.xls')
read_xml('item.xml')
read_xml('item.xml')->apt_xml
read_xml('item.xml')<-apt_xml
read_xml('item.xml')<-item.xls
read_xml('item.xml')<-'item.xls'
read_xml('item.xml')<-'dd.xml'
read_xml('item.xml')<-dd.xml
sd(vec1)
sum(vec1)
var(vec1)
Fruits
library(googleVis)
install.packages("tidyverse")
install.packages("tidyverse")
library(xml2)
library(XML)
library(googleVis)
# 년도 별로 Sales 된 수량의 합계를 구하시오.
aggregate(Sales~Year, Fruits, sum)
library(tidyverse)
library(tidyr)
aggregate(Sales~Fruit, Fruits, sum)
item_2.xml<-read_xml('item.xml')
item_2.xml('item.xml')
#Fruit 별로 가장 많이 Sales 된 수량
aggregate(Sales~Fruit, Fruits, max)
aggregate(Sales~Fruit+Year, Fruits, max)
mat1<-matrix(c(1,2,3,4,5,6), nrow=2, byrow=T)
mat1
apply(mat1, 1, sum)
xml_data<-xmlToDataFrame("item.xml")
apply(mat1[,c(2,3)], 1, sum)
apply(mat1[,c(2,3)], 2, sum)
apply(mat1[,c(2,3)], 2, max)
xml_data<-xmlToDataFrame("item.xml")
write.xml(item.file='seoul_apt_example.xml')
write_xml('seoul_apt_example.xml')
xml_data<-xmlToDataFrame("seoul_apt_example.xml")
xml_date
xml_date
View(xml_date)
xml_data<-xmlToDataFrame("C:\r_workspace\seoul_apt_example.xml")
xml_data<-xmlToDataFrame("C:\r_workspace/seoul_apt_example.xml")
xml_data<-xmlToDataFrame("C://r_workspace/seoul_apt_example.xml")
View(xml_date)
View(xml_data)
xml_data<-xmlToDataFrame("seoul_apt_example.xml")
View(xml_data)
# Matrix 에서 분석
apply(mat1, 2, sum)
# lapply, sapply -- 리스트
list1<-list(Fruits$Sales)
list1
list2<-list(Fruits$Profit)
list2
# c() : 벡터함수
lapply(c(list1, list2), max)
sapply(c(list1, list2), max)
Fruits
tapply(Sales, Fruit, sum)
tapply(Sales, Fruits, sum)
tapply(Sales, Fruit, sum)
attach(Fruits)
tapply(Sales, Fruits, sum)
tapply(Sales, Fruit, sum)
tapply(Sales, Year, Sum)
tapply(Sales, Year, sum)
vec1<-c(1,2,3,4,5)
vec2<-c(10,20,30,40,50)
vec3<-c(100,200,300,400,500)
mapply(sum, vec1, vec2, vec3)
attach(data1)
write.csv(Fruits, '2000-2013년 연령별실업율_연령별평균.csv', quote=F, row.names=F)
write.csv('2000-2013년 연령별실업율_연령별평균.csv', 'data1.csv', quote=F, row.names=F)
attach(data1)
data1<-read.csv('data1.csv')
attach(data1)
data1
write.csv(2000-2013년 연령별실업율_연령별평균.csv, 'data1.csv', quote=F, row.names=F)
data1<-read.csv('2000-2013년 연령별실업율_연령별평균균.csv')
data1<-read.csv('2000-2013년 연령별실업율_연령별평균.csv')
attach(data1)
data1
data1
data1<-read.csv('2000-2013년 연령별실업율_연령별평균.csv')
data1<-read.csv('2000-2013년 연령별실업율_연령별평균.csv')
data1
data<-read.csv('2000-2013년 연령별실업율_연령별평균.csv')
write.csv(data, 'data1', quote=F, row.names=F)
data1
data1<-read.csv('data1.csv')
data1
data<-read.csv(2000-2013년 연령별실업율_연령별평균.csv)
data1
data1<-read.csv('2000-2013년 연령별실업율_연령별평균.csv')
data1
# 년도 별로 Sales 된 수량의 합계를 구하시오.
aggregate(Sales~Year, Fruits, sum)
# 년도별 합계.
tapply(년, data1, sum)
# 년도별 합계.
tapply(연령별별, data1, sum)
# 년도별 합계.
tapply(연령별, data1, sum)
# 년도별 합계.
tapply(X2000년년, data1, sum)
# 년도별 합계.
tapply(X2000년, data1, sum)
# 년도별 합계.
tapply('X2000년', data1, sum)
# 년도별 합계.
tapply(X2000년, data1, sum)
attach(data1)
# 년도별 합계.
tapply(X2000년, data1, sum)
data1
# 년도별 합계.
aggregate(X2000년~연령별별, Fruits, sum)
# 년도별 합계.
aggregate(X2000년~연령별, Fruits, sum)
# 년도별 합계.
aggregate(연령별~X2000년년, Fruits, sum)
# 년도별 합계.
aggregate(연령별~X2000년, Fruits, sum)
# 년도별 합계.
aggregate(X2000년, Fruits, sum)
# 년도별 합계.
aggregate('X2000년', Fruits, sum)
# 년도별 합계.
aggregate(연령별별, Fruits, sum)
# 년도별 합계.
aggregate(연령별, Fruits, sum)
# 년도별 합계.
aggregate(연령별, data1, sum)
# 년도별 합계.
aggregate(X2000년~연령별, data1, sum)
aggregate(Sales~Fruit+Year, Fruits, max)
# 년도별 합계.
aggregate(X2000년~X2000년년, data1, sum)
# 년도별 합계.
aggregate(X2000년~X2000년, data1, sum)
# 년도별 합계.
aggregate(X2000년~X2000년+X2001년~X2001년, data1, sum)
# 년도별 합계.
aggregate(X2000년~X2000년,X2001년~X2001년, data1, sum)
# 년도별 합계.
aggregate(X2000년~X2013년, data1, sum)
# 년도별 합계.
aggregate(X2013년~X2000년, data1, sum)
# 년도별 합계.
aggregate(X2013년~X2001년~X2000년, data1, sum)
# 년도별 합계.
aggregate(X2000년~X2000년, data1, sum)
aggregate(X2001년~X2001년, data1, sum)
# c() : 벡터함수
lapply(c(list1, list2), max)
sapply(c(list1, list2), max)
sapply(c(data1), max)
sapply(c(data1), sum)
sapply(c(X2000년), sum)
tapply(Sales, Year, sum)
tapply(Sales, X2000년, sum)
tapply(X2000년년, X2000년, sum)
tapply(X2000년, X2000년, sum)
tapply(X2000년, X2013년, sum)
# 년도별 합계.
aggregate(X2000년~X2000년, data1, sum)
data1
# 년도별 합계.
aggregate(X2000년~X2000년, data1, sum)
# 년도 별로 Sales 된 수량의 합계를 구하시오.
aggregate(Sales~Year, Fruits, sum)
aggregate(Sales~Fruit, Fruits, sum)
#Fruit 별로 가장 많이 Sales 된 수량
aggregate(Sales~Fruit, Fruits, max)
aggregate(Sales~Fruit+Year, Fruits, max)
# 년도별 합계.
aggregate(X2000년~X2000년,X2000년~X2000년, data1, sum)
# 년도별 합계.
aggregate(X2000년~X2000년+X2000년~X2000년, data1, sum)
# 년도별 합계.
aggregate(X2000년~X2000년, data1, sum)
aggregate(X2001년~X2001년, data1, sum)
data1
aggregate(X2002년~X2002년, data1, sum)
# 년도별 합계.
aggregate(X2000년~X2000년, data1, sum)
aggregate(X2001년~X2001년, data1, sum)
aggregate(X2002년~X2002년, data1, sum)
i
i=0
i
day
day
day=0
for(i in 0:13){
day=X200+i+년
}
# 년도별 합계.
for(i in 1:9){
aggregate(X2000년~X2000년, data1, sum)
aggregate(X2001년~X2001년, data1, sum)
aggregate(X2002년~X2002년, data1, sum)
}
# 년도별 합계.
for(i in 1:9){
print(aggregate(X2000년~X2000년, data1, sum))
aggregate(X2001년~X2001년, data1, sum)
aggregate(X2002년~X2002년, data1, sum)
}
# 년도별 합계.
for(i in 1:1){
print(aggregate(X2000년~X2000년, data1, sum))
}
print(aggregate(X2000년~X2000년, data1, sum)aggregate(X2001년~X2001년, data1, sum))
print(aggregate(X2000년~X2000년, data1, sum),aggregate(X2001년~X2001년, data1, sum))
print(aggregate(X2000년~X2000년, data1, sum)+aggregate(X2001년~X2001년, data1, sum))
aggregate(X2001년~X2001년, data1, sum)
print(aggregate(X2000년~X2000년, data1, sum),
aggregate(X2001년~X2001년, data1, sum)
}
print(aggregate(X2000년~X2000년, data1, sum)
aggregate(X2001년~X2001년, data1, sum)
}
print(aggregate(X2000년~X2000년, data1, sum)
aggregate(X2001년~X2001년, data1, sum)
)
print(aggregate(X2000년~X2000년, data1, sum),
aggregate(X2001년~X2001년, data1, sum)
)
# 년도별 합계.
for(i in 1:2){
print(aggregate(X2000년~X2000년, data1, sum),
aggregate(X2001년~X2001년, data1, sum)
)
}
print(aggregate(X2000년~X2000년, data1, sum)
aggregate(X2001년~X2001년, data1, sum)
)
print(aggregate(X2001년~X2001년, data1, sum))
print(aggregate(X2000년~X2000년, data1, sum)),
print(aggregate(X2001년~X2001년, data1, sum))
print(aggregate(X2000년~X2000년, data1, sum))
# 년도별 합계.
for(i in 1:2){
print(aggregate(X2000년~X2000년, data1, sum))
print(aggregate(X2001년~X2001년, data1, sum))
}
# 년도별 합계.
for(i in 1:1){
print(aggregate(X2000년~X2000년, data1, sum))
print(aggregate(X2001년~X2001년, data1, sum))
}
apply(mat1[,c(2,3)], 2, sum)
# 년도별 합계.
for(i in 1:1){
print(aggregate(X2000년~X2000년, data1, sum))
print(aggregate(X2001년~X2001년, data1, sum))
print(aggregate(X2002년~X2002년, data1, sum))
print(aggregate(X2003년~X2003년, data1, sum))
print(aggregate(X2004년~X2004년, data1, sum))
}
# 년도별 합계.
for(i in 1:1){
print(aggregate(X2000년~X2000년, data1, sum))
print(aggregate(X2001년~X2001년, data1, sum))
print(aggregate(X2002년~X2002년, data1, sum))
print(aggregate(X2003년~X2003년, data1, sum))
print(aggregate(X2004년~X2004년, data1, sum))
print(aggregate(X2005년~X2005년, data1, sum))
print(aggregate(X2006년~X2006년, data1, sum))
print(aggregate(X2007년~X2007년, data1, sum))
print(aggregate(X2008년~X2008년, data1, sum))
print(aggregate(X2009년~X2009년, data1, sum))
print(aggregate(X2010년~X2010년, data1, sum))
print(aggregate(X2011년~X2011년, data1, sum))
print(aggregate(X2012년~X2012년, data1, sum))
print(aggregate(X2013년~X2013년, data1, sum))
}
apply(data1, 1, sum)
apply(data1, 13, sum)
apply(mat1[,c(2,3)], 2, sum)
mat1
apply(mat1[,c(2,3)], 2, sum)
# 년도별 합계.
mat1<-matrix(data(1,2,3,4,5,6), nrow=2, byrow=T)
# 년도별 합계.
mat1<-matrix(data(X2000,X2001,X2002,X2003,X2004,X2005), nrow=2, byrow=T)
apply(data1, 2, sum)
apply(data1[X2000,"X2001년"], 2, sum)
apply(data1["X2000","X2001년"], 2, sum)
apply(data1[X2000,X2001년], 2, sum)
apply(data1[X2000~X2001년], 2, sum)
apply(data1[c(,2:15)], 1, sum)
apply(data1[c(,2:15)], 1, sum)
apply(data1[,c(2:15)], 1, sum)
# 년도별 합계.
apply(data1[,c(2:15)], 2,sum)
apply(data1[,c(2:15)], 1, sum)
data2<-read.csv('1-4호선승하차승객수.csv')
data2
apply(data2[,c(2:15)], 2, sum)
apply(data2[,c(2,3)], 2, sum)
apply(data2[,c(1,3)], 2, sum)
apply(data2[,c(1,3)], 1, sum)
apply(data2[,c(1,3)], 1, sum)
apply(data2[,c(1,2)], 1, sum)
apply(data2[,c(2,3)], 1, sum)
apply(data2[,c(2,4)], 1, sum)
apply(data2[,c(2,4)], 2, sum)
apply(data1[,c(2:15)], 1, sum)
# 년도별 합계.
apply(data1[,c(2:15)], 2, sum)
apply(data2[,c(2:4)], 2, sum)
apply(data2[,c(1:3)], 2, sum)
apply(data2[,c(1:2)], 2, sum)
apply(data2[,c(2:4)], 2, sum)
data2
apply(data2[,c(1:4)], 2, sum)
apply(data2[,c(1)], 2, sum)
apply(data2[,c(1:2)], 2, sum)
apply(data2[,c(1:3)], 2, sum)
apply(data2[,c(1:4)], 2, sum)
apply(data2[,c(1:4)], 1, sum)
aggregate(노선번호~노선번호+승차, data2, max)
data2
aggregate(노선번호~노선번호+승차, data2, max)
aggregate(노선번호~노선번호, data2, max)
aggregate(노선번호~노선번호, data2, sum)
aggregate(노선번호, data2, sum)
aggregate('노선번호', data2, sum)
aggregate('노선번호', data2, sum)
aggregate(승차차, data2, sum)
aggregate(승차, data2, sum)
aggregate(c(1), data2, sum)
aggregate(승차번호호, data2, sum)
aggregate(승차번호, data2, sum)
apply(data2[,c(1:4)], 2, sum)
apply(data2[,c(2:15)], 2, sum)
data2
data1
data2
apply(data2[c(1),c(1:4)], 2, sum)
apply(data2[c(1:3),c(1:4)], 2, sum)
apply(data2[c(1:3),c(2:4)], 2, sum)
# lapply, sapply -- 리스트
list1<-list(Fruits$Sales)
# c() : 벡터함수
lapply(c(list1, list2), max)
sapply(c(list1, list2), max)
mapply(sum, vec1, vec2, vec3)
list1<-list(data2$승차번호호)
list1
tapply(승차, 노선번호, sum)
attach(data2)
tapply(승차, 노선번호, sum)
sapply(list, function)
tapply(하차차, 노선번호, sum)
tapply(하차, 노선번호, sum)
sapply(data2[,c(3,4)], sum)
aggregate(승차+하차~노선번호, data2, sum)
aggregate(승차~노선번호,data2, sum)
aggregate(하차~노선번호,data2,sum
aggregate(하차~노선번호,data2,sum)
aggregate(하차~노선번호,data2,sum)
aggregate(하차~노선번호,data2, sum)
